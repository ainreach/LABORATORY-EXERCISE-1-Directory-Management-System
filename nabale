#include <iostream>
#include <direct.h>
#include <string>


void listFiles();
void createDirectory();
void changeDirectory();


int main() {
    int choice;

    while (true) {
       
        std::cout << " Main Menu:\n";
        std::cout << "-----BANALE-----\n";
        std::cout << "1. Display List of Files\n";
        std::cout << "2. Create New Directory\n";
        std::cout << "3. Change Working Directory\n";
        std::cout << "4. Exit Program\n";
        std::cout << "Enter Number: ";
        std::cin >> choice;

        
        switch (choice) {
        case 1:
            listFiles();
            break;
        case 2:
            createDirectory();
            break;
        case 3:
            changeDirectory();
            break;
        case 4:
            return 0;
        default:
            std::cout << "Invalid choice. Please try again.\n";
        }
    }

    return 0;
}


void listFiles() {
    int choice;

    
    std::cout << "List File Details:\n";
    std::cout << "--------------------------------------\n";
    std::cout << "1. List All Files\n";
    std::cout << "2. List Files by Extension\n";
    std::cout << "3. List Files by Name Pattern\n";
    std::cout << "Enter Number: ";
    std::cin >> choice;

    
    switch (choice) {
    case 1:
        std::cout << "List of all files:\n";
        system("dir");
        break;
    case 2: {
        std::string extension;
        std::cout << "Enter file extension: ";
        std::cin >> extension;
        system(("dir *." + extension).c_str());
        break;
    }
    case 3: {
        std::string pattern;
        std::cout << "Enter file name pattern: ";
        std::cin >> pattern;
        system(("dir " + pattern).c_str());
        break;
    }
    default:
        std::cout << "Invalid choice. Please try again.\n";
    }
}


void createDirectory() {
    std::string dirName;
    std::cout << "Enter directory name: ";
    std::cin >> dirName;

    if (_mkdir(dirName.c_str()) == 0) {
        std::cout << "Directory created successfully.\n";
    } else {
        std::cout << "Error creating directory. It may already exist or be invalid.\n";
    }
}


void changeDirectory() {
    int choice;

   
    std::cout << "Change Directory Menu:\n";
    std::cout << "1. Move one step back\n";
    std::cout << "2. Move to the root directory\n";
    std::cout << "3. Move to a specific directory\n";
    std::cout << "Enter your choice: ";
    std::cin >> choice;

    
    switch (choice) {
    case 1:
        if (_chdir("..") == 0) {
            std::cout << "Moved to parent directory.\n";
        } else {
            std::cout << "Error moving to parent directory.\n";
        }
        break;
    case 2:
        if (_chdir("\\") == 0) {
            std::cout << "Moved to root directory.\n";
        } else {
            std::cout << "Error moving to root directory.\n";
        }
        break;
    case 3: {
        std::string dirName;
        std::cout << "Enter directory name: ";
        std::cin >> dirName;
        if (_chdir(dirName.c_str()) == 0) {
            std::cout << "Directory changed successfully.\n";
        } else {
            std::cout << "Error changing directory. It may not exist.\n";
        }
        break;
    }
    default:
        std::cout << "Invalid choice. Please try again.\n";
    }
}
